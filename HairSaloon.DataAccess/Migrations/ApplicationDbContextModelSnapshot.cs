// <auto-generated />
using System;
using HairSaloon.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HairSaloon.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HairSaloon.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HairSaloon.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustomerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerPhoneNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerEmail = "test@gmail.com",
                            CustomerFirstName = "Michal",
                            CustomerPhoneNumber = 222666111,
                            Date = new DateTime(2024, 12, 9, 21, 20, 39, 807, DateTimeKind.Local).AddTicks(3505),
                            EmployeeId = "b9fd838c-5e26-49f9-953a-c00e3b34b9da",
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 2,
                            CustomerEmail = "test1@gmail.com",
                            CustomerFirstName = "Michal1",
                            CustomerPhoneNumber = 222666111,
                            Date = new DateTime(2024, 12, 9, 21, 20, 39, 807, DateTimeKind.Local).AddTicks(3541),
                            EmployeeId = "ae06c675-dbfb-4f62-b546-02cc6e8a1d09",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 3,
                            CustomerEmail = "test2@gmail.com",
                            CustomerFirstName = "Michal2",
                            CustomerPhoneNumber = 222666111,
                            Date = new DateTime(2024, 12, 9, 21, 20, 39, 807, DateTimeKind.Local).AddTicks(3542),
                            EmployeeId = "ae06c675-dbfb-4f62-b546-02cc6e8a1d09",
                            ServiceId = 2
                        });
                });

            modelBuilder.Entity("HairSaloon.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DurationInMinutes")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Price")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Strzyżenie",
                            Description = "",
                            DurationInMinutes = 60,
                            Name = "Strzyżenie męskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 2,
                            Category = "Farbowanie",
                            Description = "",
                            DurationInMinutes = 90,
                            Name = "Strzyżenie damskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 3,
                            Category = "Pakiety",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Farbowanie włosów",
                            Price = 50
                        },
                        new
                        {
                            Id = 4,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 5,
                            Category = "Strzyżenie",
                            Description = "",
                            DurationInMinutes = 60,
                            Name = "Strzyżenie męskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 6,
                            Category = "Farbowanie",
                            Description = "",
                            DurationInMinutes = 90,
                            Name = "Strzyżenie damskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 7,
                            Category = "Pakiety",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Farbowanie włosów",
                            Price = 50
                        },
                        new
                        {
                            Id = 8,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 9,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 10,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 11,
                            Category = "Strzyżenie",
                            Description = "",
                            DurationInMinutes = 60,
                            Name = "Strzyżenie męskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 12,
                            Category = "Farbowanie",
                            Description = "",
                            DurationInMinutes = 90,
                            Name = "Strzyżenie damskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 13,
                            Category = "Pakiety",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Farbowanie włosów",
                            Price = 50
                        },
                        new
                        {
                            Id = 14,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 15,
                            Category = "Strzyżenie",
                            Description = "",
                            DurationInMinutes = 60,
                            Name = "Strzyżenie męskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 16,
                            Category = "Farbowanie",
                            Description = "",
                            DurationInMinutes = 90,
                            Name = "Strzyżenie damskie",
                            Price = 50
                        },
                        new
                        {
                            Id = 17,
                            Category = "Pakiety",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Farbowanie włosów",
                            Price = 50
                        },
                        new
                        {
                            Id = 18,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 19,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        },
                        new
                        {
                            Id = 20,
                            Category = "Pielęgnacja",
                            Description = "",
                            DurationInMinutes = 30,
                            Name = "Depilacja",
                            Price = 50
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HairSaloon.Models.Appointment", b =>
                {
                    b.HasOne("HairSaloon.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSaloon.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HairSaloon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HairSaloon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSaloon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HairSaloon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
